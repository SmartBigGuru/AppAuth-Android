apply plugin: 'com.android.application'
apply plugin: 'checkstyle'

android {
    signingConfigs {
        debugAndRelease {
            keyAlias 'appauth'
            keyPassword 'appauth'
            storeFile file('../appauth.keystore')
            storePassword 'appauth'
        }
    }
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        applicationId "net.openid.appauthdemo"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "0.1"
    }

    sourceSets {
        main.manifest.srcFile 'AndroidManifest.xml'
        main.java.srcDirs = ['src']
        main.aidl.srcDirs = ['src']
        main.res.srcDir 'res'
        main.assets.srcDir 'assets'
        main.resources.srcDir 'src'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debugAndRelease
        }
        debug {
            signingConfig signingConfigs.debugAndRelease
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    lintOptions {
        warningsAsErrors true
        disable 'PrivateResource'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':library')
    compile 'com.android.support:appcompat-v7:23.2.0'
    compile 'com.android.support:design:23.2.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
}

checkstyle {
    configFile file('../config/checkstyle/checkstyle.xml')
    configProperties = ['checkstyle.java.header': file('../config/checkstyle/java.header').getAbsolutePath()]
    toolVersion = "6.11.2"
}

task checkAllSource(type: Checkstyle) {
    source 'src'
    include '**/*.java'
    classpath = files project.configurations.compile.files
}

task failOnCheckstyleWarning {
    def checkstyleWarningsFile = 'build/reports/checkstyle/checkAllSource.xml'
    doLast {
        File warningsFile = file(checkstyleWarningsFile)
        if (warningsFile.exists() && warningsFile.text.contains("<error ")) {
            throw new GradleException(
                    "There were checkstyle warnings. For more details check: " \
                     + file(checkstyleWarningsFile))
        }
    }
}

// ensure that there are no style warnings
failOnCheckstyleWarning.dependsOn checkAllSource

// run checkstyle as part of the standard set of checks
check.dependsOn failOnCheckstyleWarning
